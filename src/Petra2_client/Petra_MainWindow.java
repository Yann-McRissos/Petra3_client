/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Petra2_client;

import ClassLibrary.*;
import java.net.*;
import java.io.*;
import static java.lang.Thread.sleep;
import java.util.*;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;

/**
 *
 * @author jerem
 */
public class Petra_MainWindow extends javax.swing.JFrame {

	Socket cliSock = null;
	/* Initialisations indispensables */
	DataInputStream dis = null;
	DataOutputStream dos = null;
	String IP = "10.59.40.64";
	int port = 40004;
	//thread_Capteurs thread=null;
	private Thread internalThread;
	
	Actuateurs act = new Actuateurs();
	Capteurs cap = new Capteurs();
	
	// variables du lexer
	boolean flag_if = false;
	boolean flag_else = false;
	boolean flag_loop = false;
	boolean condition_checked = false;
	int loop_index;

	/**
	 * Creates new form Petra_MainWindow
	 */
	public Petra_MainWindow() {
            initComponents();
            this.setResizable(false);
            this.setLocationRelativeTo(null);
            this.jLabel_recu.setText("");
            this.jLabel_envoye.setText("");
            this.jLabel_arm_up.setVisible(false);
	}

	/**	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup_capteurs = new javax.swing.ButtonGroup();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel_arm_up = new javax.swing.JLabel();
        jLabel_arm = new javax.swing.JLabel();
        jLabel_petra = new javax.swing.JLabel();
        jCheckBox_DE = new javax.swing.JCheckBox();
        jCheckBox_PP = new javax.swing.JCheckBox();
        jCheckBox_CS = new javax.swing.JCheckBox();
        jCheckBox_S = new javax.swing.JCheckBox();
        jCheckBox_T = new javax.swing.JCheckBox();
        jPanel_actuateurs = new javax.swing.JPanel();
        jLabel_actuateurs = new javax.swing.JLabel();
        jRadioButtonConv1 = new javax.swing.JRadioButton();
        jRadioButtonConv2 = new javax.swing.JRadioButton();
        jRadioButtonPlongeur = new javax.swing.JRadioButton();
        jRadioButtonVentouse = new javax.swing.JRadioButton();
        jRadioButtonBras = new javax.swing.JRadioButton();
        jRadioButtonGrappin = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jPanel_connection = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel_recutext = new javax.swing.JLabel();
        jLabel_envoyetext = new javax.swing.JLabel();
        jLabel_recu = new javax.swing.JLabel();
        jLabel_envoye = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField_serverIP = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField_serverPort = new javax.swing.JTextField();
        jButton_connect = new javax.swing.JButton();
        jButton_Deconnexion = new javax.swing.JButton();
        jButton_Envoyer = new javax.swing.JButton();
        jCheckBox_L2 = new javax.swing.JCheckBox();
        jCheckBox_L1 = new javax.swing.JCheckBox();
        jCheckBox_H = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel_arm_up.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Petra2_client/petra_arm_up.png"))); // NOI18N

        jLabel_arm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Petra2_client/petra_arm.png"))); // NOI18N

        jLabel_petra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Petra2_client/petra_no_arm.png"))); // NOI18N

        jCheckBox_DE.setText("Bac vide");

        jCheckBox_PP.setText("Plongeur bas");

        jCheckBox_CS.setText("Chariot en mouvement");

        jCheckBox_S.setText("S");

        jCheckBox_T.setText("T");

        jLayeredPane1.setLayer(jLabel_arm_up, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel_arm, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel_petra, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jCheckBox_DE, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jCheckBox_PP, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jCheckBox_CS, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jCheckBox_S, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jCheckBox_T, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(jCheckBox_DE))
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jCheckBox_PP)
                                .addGap(524, 524, 524))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                                        .addComponent(jCheckBox_T)
                                        .addGap(232, 232, 232)
                                        .addComponent(jCheckBox_S)
                                        .addGap(83, 83, 83))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                                        .addComponent(jCheckBox_CS, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40)))))
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel_arm, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                            .addComponent(jLabel_arm_up, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel_petra)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel_arm_up))
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGap(189, 189, 189)
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_arm, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addComponent(jCheckBox_CS)
                                .addGap(36, 36, 36)
                                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCheckBox_S)
                                    .addComponent(jCheckBox_T))
                                .addGap(40, 40, 40)
                                .addComponent(jCheckBox_PP, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(79, 79, 79)
                .addComponent(jCheckBox_DE)
                .addContainerGap(15, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel_petra)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jLabel_actuateurs.setText("Actuateurs");

        buttonGroup1.add(jRadioButtonConv1);
        jRadioButtonConv1.setText("Convoyeur 1");
        jRadioButtonConv1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonConv1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButtonConv2);
        jRadioButtonConv2.setText("Convoyeur 2");
        jRadioButtonConv2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonConv2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButtonPlongeur);
        jRadioButtonPlongeur.setText("Plongeur");
        jRadioButtonPlongeur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonPlongeurActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButtonVentouse);
        jRadioButtonVentouse.setText("Ventouse");
        jRadioButtonVentouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonVentouseActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButtonBras);
        jRadioButtonBras.setText("Bras");
        jRadioButtonBras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonBrasActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButtonGrappin);
        jRadioButtonGrappin.setText("Grappin");
        jRadioButtonGrappin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonGrappinActionPerformed(evt);
            }
        });

        jLabel8.setText("Chariot");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Réservoir", "Convoyeur 1", "Bac KO", "Convoyeur 2" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_actuateursLayout = new javax.swing.GroupLayout(jPanel_actuateurs);
        jPanel_actuateurs.setLayout(jPanel_actuateursLayout);
        jPanel_actuateursLayout.setHorizontalGroup(
            jPanel_actuateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_actuateursLayout.createSequentialGroup()
                .addGroup(jPanel_actuateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_actuateurs)
                    .addGroup(jPanel_actuateursLayout.createSequentialGroup()
                        .addComponent(jRadioButtonConv1)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButtonConv2)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButtonPlongeur)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButtonVentouse)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButtonGrappin)
                        .addGap(15, 15, 15)
                        .addComponent(jRadioButtonBras)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 24, Short.MAX_VALUE))
        );
        jPanel_actuateursLayout.setVerticalGroup(
            jPanel_actuateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_actuateursLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel_actuateurs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_actuateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_actuateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel_actuateursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jRadioButtonConv1)
                        .addComponent(jRadioButtonConv2)
                        .addComponent(jRadioButtonPlongeur)
                        .addComponent(jRadioButtonVentouse)
                        .addComponent(jRadioButtonBras)
                        .addComponent(jRadioButtonGrappin)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel_recutext.setText("Reçu:");

        jLabel_envoyetext.setText("Envoyé:");

        jLabel_recu.setText("[data]");

        jLabel_envoye.setText("[data]");

        jLabel6.setText("IP serveur:");

        jTextField_serverIP.setText("10.59.40.64");
        jTextField_serverIP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField_serverIPFocusLost(evt);
            }
        });

        jLabel7.setText("Port:");

        jTextField_serverPort.setText("40004");
        jTextField_serverPort.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField_serverPortFocusLost(evt);
            }
        });

        jButton_connect.setText("Connexion au serveur");
        jButton_connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_connectActionPerformed(evt);
            }
        });

        jButton_Deconnexion.setText("Déconnexion");
        jButton_Deconnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_DeconnexionActionPerformed(evt);
            }
        });

        jButton_Envoyer.setText("Envoyer");
        jButton_Envoyer.setActionCommand("EnvoyerButton");
        jButton_Envoyer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_EnvoyerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_connectionLayout = new javax.swing.GroupLayout(jPanel_connection);
        jPanel_connection.setLayout(jPanel_connectionLayout);
        jPanel_connectionLayout.setHorizontalGroup(
            jPanel_connectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_connectionLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_connectionLayout.createSequentialGroup()
                .addContainerGap(60, Short.MAX_VALUE)
                .addGroup(jPanel_connectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_connectionLayout.createSequentialGroup()
                        .addGroup(jPanel_connectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_recutext)
                            .addComponent(jLabel_recu))
                        .addGroup(jPanel_connectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_connectionLayout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField_serverIP, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel_connectionLayout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addGroup(jPanel_connectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton_Envoyer)
                                    .addGroup(jPanel_connectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel_envoyetext)
                                        .addComponent(jLabel_envoye))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_connectionLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_serverPort, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_connectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton_connect, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_Deconnexion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(71, 71, 71))
        );
        jPanel_connectionLayout.setVerticalGroup(
            jPanel_connectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_connectionLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton_Envoyer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(jPanel_connectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_connectionLayout.createSequentialGroup()
                        .addComponent(jLabel_envoyetext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_envoye))
                    .addGroup(jPanel_connectionLayout.createSequentialGroup()
                        .addComponent(jLabel_recutext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_recu)))
                .addGap(34, 34, 34)
                .addGroup(jPanel_connectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_serverIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel_connectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_serverPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addComponent(jButton_connect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_Deconnexion, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jCheckBox_L2.setText("L2");

        jCheckBox_L1.setText("L1");

        jCheckBox_H.setText("H");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel_actuateurs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(253, 253, 253)
                        .addComponent(jCheckBox_L2)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox_L1)
                        .addGap(209, 209, 209)
                        .addComponent(jCheckBox_H)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel_connection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBox_L2)
                            .addComponent(jCheckBox_L1)
                            .addComponent(jCheckBox_H))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel_actuateurs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel_connection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_connectActionPerformed
        try {
                cliSock = new Socket(IP, port);
                System.out.println(cliSock.getInetAddress().toString());
                dis = new DataInputStream(cliSock.getInputStream());
                dos = new DataOutputStream(cliSock.getOutputStream());
                //thread = new thread_Capteurs(dis); thread.start();
                // lancer le thread/bean des capteurs
                Runnable r = new Runnable() {
                        public void run() {
                                try {
                                        runWork();
                                } catch (Exception e) {
                                        System.err.println(e.getMessage());
                                }
                        }
                };
                internalThread = new Thread(r, "Thread capteurs");
                internalThread.start();
        } catch (UnknownHostException e) {
                System.err.println("Erreur ! Host non trouvé [" + e + "]");
        } catch (IOException e) {
                System.err.println("Erreur ! Pas de connexion ? [" + e + "]");
        }
    }//GEN-LAST:event_jButton_connectActionPerformed

    private void jRadioButtonConv1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonConv1ActionPerformed
		try {
			sendMsg(1);
		} catch (Exception e) {
			System.err.println("Erreur ! Pas de connexion ? [" + e.getMessage() + "]");
		}
    }//GEN-LAST:event_jRadioButtonConv1ActionPerformed

    private void jRadioButtonConv2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonConv2ActionPerformed
		try {
			sendMsg(2);
		} catch (Exception e) {
			System.err.println("Erreur ! Pas de connexion ? [" + e.getMessage() + "]");
		}
    }//GEN-LAST:event_jRadioButtonConv2ActionPerformed

    private void jRadioButtonPlongeurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonPlongeurActionPerformed
		try {
			sendMsg(4);
		} catch (Exception e) {
			System.err.println("Erreur ! Pas de connexion ? [" + e.getMessage() + "]");
		}
    }//GEN-LAST:event_jRadioButtonPlongeurActionPerformed

    private void jRadioButtonVentouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonVentouseActionPerformed
		try {
			sendMsg(3);
		} catch (Exception e) {
			System.err.println("Erreur ! Pas de connexion ? [" + e.getMessage() + "]");
		}
    }//GEN-LAST:event_jRadioButtonVentouseActionPerformed

    private void jRadioButtonBrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonBrasActionPerformed
		try {
			sendMsg(5);
		} catch (Exception e) {
			System.err.println("Erreur ! Pas de connexion ? [" + e.getMessage() + "]");
		}
    }//GEN-LAST:event_jRadioButtonBrasActionPerformed

    private void jRadioButtonGrappinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonGrappinActionPerformed
		try {
			sendMsg(6);
		} catch (Exception e) {
			System.err.println("Erreur ! Pas de connexion ? [" + e.getMessage() + "]");
		}
    }//GEN-LAST:event_jRadioButtonGrappinActionPerformed

    private void jTextField_serverIPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField_serverIPFocusLost
		try {
			IP = this.jTextField_serverIP.getText();
			System.out.println("IP: " + IP);
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}
    }//GEN-LAST:event_jTextField_serverIPFocusLost

    private void jTextField_serverPortFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField_serverPortFocusLost
		try {
			port = Integer.valueOf(this.jTextField_serverPort.getText());
			System.out.println("Port: " + port);
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}
    }//GEN-LAST:event_jTextField_serverPortFocusLost

    private void jButton_DeconnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_DeconnexionActionPerformed
		try {
			sendMsg(0);
			internalThread.interrupt();
			dis.close();
			dos.close();
			cliSock.close();
			internalThread.stop();
		} catch (Exception e) {
			System.err.println("Erreur ! Pas de connexion ? [" + e.getMessage() + "]");
		}
    }//GEN-LAST:event_jButton_DeconnexionActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
		int choice;
		System.out.println("test");
		try {
			buttonGroup1.clearSelection();
			choice = jComboBox1.getSelectedIndex();
			System.out.println("Choix: " + choice);
			switch (choice) {
				case 0:
					sendMsg(7);
					break;
				case 1:
					sendMsg(8);
					break;
				case 2:
					sendMsg(9);
					break;
				case 3:
					sendMsg(10);
					break;
			}
		} catch (Exception e) {
			System.err.println("Erreur ! Pas de connexion ? [" + e.getMessage() + "]");
		}
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton_EnvoyerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_EnvoyerActionPerformed
        //StringTokenizer words = new StringTokenizer(jTextArea1.getText(), " .=;\n");
		String str = jTextArea1.getText();
		String[] words = str.split(" \\s\\n");
        String word;
		
		for(int i=0; i < words.length ; i++)
		{
			/*
				trouver un moyen de sauter et revenir à certaines lignes
				Retourner le numéro d'index avec la fonction d'analyse ? (requiert un paramètre supplémentaire)
				Retenir le numéro d'index dans cette fonction ?
				Après un if, on check la condition, si faux on saute au else ou la fin du if (celui qui vient en premier)
				Pour un loop, quand la condition n'est plus respectée il suffit d'ignorer toutes les lignes jusqu'à arriver au endloop 
				ou alors de sauter à la ligne endloop en ayant retenu son index
			*/
			try
			{
				words[i] = words[i].trim();
				//System.out.println("words["+i+"] = " + words[i]);
				//System.out.println("words[i+1] = " + words[i+1]);
				//System.out.println("words[i].equals(ON) = " + words[i].equals("ON"));

				if(flag_if)
				{
					if(condition_checked)
						analyseCommand(words, i);
					else
					{
						if(analyseCondition(words, i))
							condition_checked = true;
						else // condition pas respectée, on saute jusqu'au else ou fin de condition
						{
							while(i < words.length)
							{
								if(words[i].equals("ELSE"))
									break;
								if(words[i].equals("ENDIF"))
								{
									flag_if = false;
									condition_checked = false;
									break;
								}
								i++;
							}
						}
					}
				}
				else
				{
					if(flag_loop)	// boucle
					{
						if(words[i].equals("ENDLOOP"))	// si fin boucle
						{
							i = loop_index;
							condition_checked = false;
						}
						else	// sinon, corps boucle
						{
							if(condition_checked)
							{
								analyseCommand(words, i);
							}
							else
							{
								if(analyseCondition(words, i))
								{
									loop_index = i-1;
									condition_checked = true;
								}
								else // condition pas respectée, on saute jusqu'a la fin d'itération
								{
									while(i < words.length)
									{
										if(words[i].equals("ENDLOOP"))
										{
											flag_loop = false;
											condition_checked = false;
											break;
										}
										i++;
									}
								}
							}
						}
					}
					else // situation normale, pas de conditions ou d'itérations
						analyseCommand(words, i);
				}
			}
			catch (Exception e)
			{
				System.out.println("megaerror: " + e.getMessage());
			}
		}
    }//GEN-LAST:event_jButton_EnvoyerActionPerformed

	public int analyseCommand(String[] words, int i) throws InterruptedException
	{
		switch(words[i])
		{
			case "TIMEOUT":
				System.out.println("TIMEOUT");
				TimeUnit.SECONDS.sleep(Integer.parseInt(words[i+1].trim()));
				break;
			case "IF":
				System.out.println("IF");
				flag_if = true;
				return 1;
			case "ELSE":
				System.out.println("ELSE");
				flag_else = true;
				return 2;
			case "ENDIF":
				System.out.println("ENDIF");
				flag_if = false;
				flag_else = false;
				return 3;
			case "LOOP":
				System.out.println("LOOP");
				flag_loop = true;
				return 4;
			case "ENDLOOP":
				System.out.println("ENDLOOP");
				flag_loop = false;
				return 5;
			case "C1":
				System.out.println("C1");
				i++;
				if(words[i].equals("ON"))
				{
					act.setC1(true);
					sendMsg(1);
				}
				else
				{
					if(words[i].equals("OFF"))
					{
						act.setC1(false);
						sendMsg(10);
					}
					else
						System.err.println("Commande inconnue: " + words[i+1]);
				}
				break;
			case "C2":
				System.out.println("C2");
				i++;
				if(words[i].equals("ON"))
				{
					act.setC2(true);
					sendMsg(2);
				}
				else
				{
					if(words[i].equals("OFF"))
					{
						act.setC2(false);
						sendMsg(20);
					}
					else
						System.err.println("Commande inconnue: " + words[i+1]);
				}
				break;
			case "VENTOUSE":
				System.out.println("VENTOUSE");
				i++;
				if(words[i].equals("ON"))
				{
					act.setVENTOUSE(true);
					sendMsg(3);
				}
				else
				{
					if(words[i].equals("OFF"))
					{
						act.setVENTOUSE(false);
						sendMsg(30);
					}
					else
						System.err.println("Commande inconnue: " + words[i+1]);
				}
				break;
			case "PLONGEUR":
				System.out.println("PLONGEUR");
				i++;
				if(words[i].equals("ON"))
				{
					act.setPLONGEUR(true);
					sendMsg(4);
				}
				else
				{
					if(words[i].equals("OFF"))
					{
						act.setPLONGEUR(false);
						sendMsg(40);
					}
					else
						System.err.println("Commande inconnue: " + words[i+1]);
				}
				break;
			case "BRAS":
				System.out.println("BRAS");
				i++;
				if(words[i].equals("ON"))
				{
					act.setGRAPPIN(true);
					sendMsg(5);
				}
				else
				{
					if(words[i].equals("OFF"))
					{
						act.setGRAPPIN(false);
						sendMsg(50);
					}
					else
						System.err.println("Commande inconnue: " + words[i+1]);
				}
				break;
			case "GRAPPIN":
				System.out.println("GRAPPIN");
				i++;
				if(words[i].equals("ON"))
				{
					act.setGRAPPIN(true);
					sendMsg(6);
				}
				else
				{
					if(words[i].equals("OFF"))
					{
						act.setGRAPPIN(false);
						sendMsg(60);
					}
					else
						System.err.println("Commande inconnue: " + words[i+1]);
				}
				break;
			case "CHARIOT":
				System.out.println("CHARIOT");
				i++;
				switch(words[i])
				{
					// Réservoir, Convoyeur 1, Bac KO, Convoyeur 2
					case "RE":
						act.setCHARIOT(act.BACENTREE);
						sendMsg(act.BACENTREE);
						break;
					case "C1":
						act.setCHARIOT(act.CONV1);
						sendMsg(act.CONV1);
						break;
					case "KO":
						act.setCHARIOT(act.BACKO);
						sendMsg(act.BACKO);
						break;
					case "C2":
						act.setCHARIOT(act.CONV2);
						sendMsg(act.CONV2);
						break;
					default: System.out.println("Commande inconnue: " + words[i+1]); break;
				}					
				break;
			default: System.err.println("Mot inconnu: " + words[i]); break;
		}
		return 0;
	}
	
	public boolean analyseCondition(String[] words, int i)
	{
		switch(words[i])
		{
			case "C1":
				System.out.println("C1");
				i++;
				if(words[i].equals("ON"))
				{
					if(act.isC1())
						return true;
					else
						return false;
				}
				else
				{
					if(words[i].equals("OFF"))
					{
						if(act.isC1())
							return false;
						else
							return true;
					}
					else
					System.err.println("Commande inconnue: " + words[i+1]);
				}
				break;
			case "C2":
				System.out.println("C2");
				i++;
				if(words[i].equals("ON"))
				{
					if(act.isC2())
						return true;
					else
						return false;
				}
				else
				{
					if(words[i].equals("OFF"))
					{
						if(act.isC2())
							return false;
						else
							return true;
					}
					else
						System.err.println("Commande inconnue: " + words[i+1]);
				}
				break;
			case "PLONGEUR":
				System.out.println("PLONGEUR");
				i++;
				if(words[i].equals("ON"))
				{
					if(act.isPLONGEUR())
						return true;
					else
						return false;
				}
				else
				{
					if(words[i].equals("OFF"))
					{
						if(act.isPLONGEUR())
							return false;
						else
							return true;
					}
					else
						System.err.println("Commande inconnue: " + words[i+1]);
				}
				break;
			case "VENTOUSE":
				System.out.println("VENTOUSE");
				i++;
				if(words[i].equals("ON"))
				{
					if(act.isVENTOUSE())
						return true;
					else
						return false;
				}
				else
				{
					if(words[i].equals("OFF"))
					{
						if(act.isVENTOUSE())
							return false;
						else
							return true;
					}
					else
						System.err.println("Commande inconnue: " + words[i+1]);
				}
				break;
			case "BRAS":
				System.out.println("BRAS");
				i++;
				if(words[i].equals("ON"))
				{
					if(act.isBRAS())
						return true;
					else
						return false;
				}
				else
				{
					if(words[i].equals("OFF"))
					{
						if(act.isBRAS())
							return false;
						else
							return true;
					}
					else
						System.err.println("Commande inconnue: " + words[i+1]);
				}
				break;
			case "GRAPPIN":
				System.out.println("GRAPPIN");
				i++;
				if(words[i].equals("ON"))
				{
					if(act.isGRAPPIN())
						return true;
					else
						return false;
				}
				else
				{
					if(words[i].equals("OFF"))
					{
						if(act.isGRAPPIN())
							return false;
						else
							return true;
					}
					else
						System.err.println("Commande inconnue: " + words[i+1]);
				}
				break;
			case "CHARIOT":
				System.out.println("CHARIOT");
				i++;
				switch(words[i])
				{
					// Réservoir, Convoyeur 1, Bac KO, Convoyeur 2
					case "RE":
						if(act.getCHARIOT() == act.BACENTREE)
							return true;
						else
							return false;
					case "C1":
						if(act.getCHARIOT() == act.CONV1)
							return true;
						else
							return false;
					case "KO":
						if(act.getCHARIOT() == act.BACKO)
							return true;
						else
							return false;
					case "C2":
						if(act.getCHARIOT() == act.CONV2)
							return true;
						else
							return false;
					default: System.out.println("Commande inconnue: " + words[i+1]); break;
				}					
				break;
			default: System.err.println("Mot inconnu: " + words[i]); break;
		}
		return false;
	}		
	
	public void sendMsg(int num)
	{
		try 
		{
			this.jLabel_envoye.setText(String.valueOf(num));
			//dos.write(num.getBytes()); dos.flush();
			dos.writeByte(num);
			dos.flush();
		} catch (IOException e) {
			System.err.println("Erreur de communication ? [" + e + "]");
		}
	}

	private void runWork()
	{
		byte capteur, old_value = 0;

		System.out.println("Démarrage thread...");
		while (true)
		{
			try 
			{
				capteur = dis.readByte();
				System.out.println("Recu: " + capteur);
				if (capteur != old_value)
				{
					switch (capteur)
					{
						case 0:
							System.out.println("Aucun capteur");
							// reset les capteurs
							jCheckBox_L1.setSelected(false);
							jCheckBox_L2.setSelected(false);
							jCheckBox_H.setSelected(false);
							jCheckBox_S.setSelected(false);
							jCheckBox_CS.setSelected(false);
							jCheckBox_PP.setSelected(false);
							jCheckBox_DE.setSelected(false);
							jLabel_arm.setVisible(true);
							jLabel_arm_up.setVisible(false);
							break;
						case 1:
							System.out.println("L1");
							this.jCheckBox_L1.setSelected(true);
							break;
						case 2:
							System.out.println("L2");
							this.jCheckBox_L2.setSelected(true);
							break;
						case 3:
							System.out.println("L1 et L2");
							this.jCheckBox_L1.setSelected(true);
							this.jCheckBox_L2.setSelected(true);
							break;
						case 4:
							System.out.println("H");
							this.jCheckBox_H.setSelected(true);
							break;
						case 8:
							System.out.println("S - Slot");
							this.jCheckBox_S.setSelected(true);
							break;
						case 16:
							System.out.println("Chariot instable (en mouvement)");
							this.jCheckBox_CS.setSelected(true);
							break;
						case 32:
							System.out.println("Bras/arbre - Convoyeur 2");
							//jCheckBox_AP.setSelected(true);
							this.jLabel_arm.setVisible(false);
							this.jLabel_arm_up.setVisible(true);
							break;
						case 64:
							System.out.println("Plongeur - position basse");
							jCheckBox_PP.setSelected(true);
							break;
						case (byte) 128:
							System.out.println("Bac d'entrée vide");
							jCheckBox_DE.setSelected(true);
							break;
						default:
							System.out.println("???");
							break;
					}
					old_value = capteur;
				}
			} catch (IOException e) {
				System.err.println("readByte Error: " + e.getMessage());
			} catch (Exception e) {
				System.err.println("readByte Error: " + e.getMessage());
			}
		}
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Petra_MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Petra_MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Petra_MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Petra_MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(() -> {
			new Petra_MainWindow().setVisible(true);
		});
	}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup_capteurs;
    private javax.swing.JButton jButton_Deconnexion;
    private javax.swing.JButton jButton_Envoyer;
    private javax.swing.JButton jButton_connect;
    private javax.swing.JCheckBox jCheckBox_CS;
    private javax.swing.JCheckBox jCheckBox_DE;
    private javax.swing.JCheckBox jCheckBox_H;
    private javax.swing.JCheckBox jCheckBox_L1;
    private javax.swing.JCheckBox jCheckBox_L2;
    private javax.swing.JCheckBox jCheckBox_PP;
    private javax.swing.JCheckBox jCheckBox_S;
    private javax.swing.JCheckBox jCheckBox_T;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel_actuateurs;
    private javax.swing.JLabel jLabel_arm;
    private javax.swing.JLabel jLabel_arm_up;
    private javax.swing.JLabel jLabel_envoye;
    private javax.swing.JLabel jLabel_envoyetext;
    private javax.swing.JLabel jLabel_petra;
    private javax.swing.JLabel jLabel_recu;
    private javax.swing.JLabel jLabel_recutext;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel_actuateurs;
    private javax.swing.JPanel jPanel_connection;
    private javax.swing.JRadioButton jRadioButtonBras;
    private javax.swing.JRadioButton jRadioButtonConv1;
    private javax.swing.JRadioButton jRadioButtonConv2;
    private javax.swing.JRadioButton jRadioButtonGrappin;
    private javax.swing.JRadioButton jRadioButtonPlongeur;
    private javax.swing.JRadioButton jRadioButtonVentouse;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField_serverIP;
    private javax.swing.JTextField jTextField_serverPort;
    // End of variables declaration//GEN-END:variables
}
